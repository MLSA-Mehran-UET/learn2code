public class Fenwick
{
    private readonly long[] bit; // 1-based indexing
    private readonly int n;

    public Fenwick(int n)
    {
        this.n = n;
        bit = new long[n + 1];
    }

    public Fenwick(int[] arr) : this(arr.Length)
    {
        for (int i = 0; i < arr.Length; i++) Add(i + 1, arr[i]);
    }

    // Add 'delta' at index i (1..n)
    public void Add(int i, long delta)
    {
        for (; i <= n; i += i & -i) bit[i] += delta;
    }

    // Prefix sum [1..i]
    public long PrefixSum(int i)
    {
        long s = 0;
        for (; i > 0; i -= i & -i) s += bit[i];
        return s;
    }

    // Range sum [l..r], with 1-based indices
    public long RangeSum(int l, int r) => PrefixSum(r) - PrefixSum(l - 1);

    // Find smallest index i such that PrefixSum(i) >= target (if monotonic, e.g., counts/frequencies)
    public int LowerBound(long target)
    {
        int idx = 0;
        int maxPow = 1;
        while ((maxPow << 1) <= n) maxPow <<= 1;

        for (int step = maxPow; step > 0; step >>= 1)
        {
            int next = idx + step;
            if (next <= n && bit[next] < target)
            {
                idx = next;
                target -= bit[next];
            }
        }
        return idx + 1; // 1..n (caller should validate bounds)
    }
}
